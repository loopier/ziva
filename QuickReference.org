#+title: Živa Quick Reference

* Setup
** Booting the server
#+begin_src sclang
Ziva.boot;
#+end_src
** Changing server settings
Boot the server with any of the following variables (or us ~ServerOptions~ before evaluating ~Ziva.boot~)
#+begin_src sclang
Ziva.boot(inputChannels:2, outputChannels:2, numBuffers:16, memSize:32, maxNodes:32);
#+end_src

** Samples
In Živa two types of sounds can be played: samples and synths. The path to the samples directory must be set. Some default synths are loaded automatically.

The path to the samples directory must be holding subdirectories, which themselves store the audio files.

Each subdirectory name will become the sample name accessible from Ži va, and each sample within that directory will be accessed with the ~n~ function.  More on this later.

#+begin_src sclang
Ziva.loadSamples("path/to/samples/parent/directory");
#+end_src

For example, you can load the samples that come with this quark:

#+begin_src sclang
Ziva.loadSamples(Platform.userAppSupportDir++"/downloaded-quarks/ziva/samples");
#+end_src

Several sample lists can be added from different folders, with consecutive calls to this function; beware that if there are two subfolders with the same name only the last one will prevail.

To list all loaded samples, evaluate this function and check the post window (the number between ~()~ is the number of audio files in that subdirectory):

#+begin_src sclang
Ziva.sounds;
#+end_src

** Synths

To list currently available synths use:

#+begin_src sclang
Ziva.synths;
#+end_src

** Tempo

For now, to set the BPM we need to use regular SuperCollider:

#+begin_src sclang
TempoClock.default.tempo = 120/60; // 120 bpm
#+end_src

This value can be changed at any time and will affect all sounds.

* Playing Sounds
** synth sound

#+begin_src sclang
~lola = Psynth(\acid);
#+end_src

** sample sound
#+begin_src sclang
~delia = Psample(\delia);
#+end_src

** play
#+begin_src sclang
(
[
    ~lola,
].ziva;
)
#+end_src

** stop
#+begin_src sclang
(
[
    // ~lola,
    nil
].ziva
)
#+end_src

** Samples and Synths Parameters
*** duration

Preset

#+begin_src sclang
[~lola.fast].ziva;
[~lola.faster].ziva;
[~lola.fastest].ziva;
[~lola.slow].ziva;
[~lola.slower].ziva;
[~lola.slowest].ziva;
#+end_src

Custom

#+begin_src sclang
[~lola.dur(1/3)].ziva;
#+end_src

*** volume

Preset

#+begin_src sclang
[~lola.f].ziva;
[~lola.ff].ziva;
[~lola.fff].ziva;
[~lola.ffff].ziva;
[~lola.p].ziva;
[~lola.pp].ziva;
[~lola.ppp].ziva;
#+end_src

Custom

#+begin_src sclang
[~lola.amp(0.2)].ziva;
#+end_src

*** legato (sustain)

Preset

#+begin_src sclang
[~lola.pizz].ziva;
[~lola.stass].ziva;
[~lola.stacc].ziva;
[~lola.tenuto].ziva;
[~lola.legato].ziva;
[~lola.pedal].ziva;
#+end_src

Custom

#+begin_src sclang
   [~lola.legato(1.2)].ziva,
#+end_src

*** panning

left

#+begin_src sclang
[~lola.left].ziva;
[~lola.pan(-1)].ziva;
#+end_src

right

#+begin_src sclang
[~lola.right].ziva;
[~lola.pan(1)].ziva;
#+end_src

center (default -- doesn't need to be set)

#+begin_src sclang
[~lola.pan(0)].ziva;
#+end_src

alternate between left and right

#+begin_src sclang
[~lola.pingpong].ziva;
#+end_src

random panning on every hit:

#+begin_src sclang
[~lola.randpan].ziva;
#+end_src

custom

#+begin_src sclang
[~lola.pan(-0.5)].ziva; // -1 far left, 1 far right
#+end_src

*** rhythm
**** euclidean rhythms
~.bj(hits, beats, [offset, ...])~
#+begin_src sclang
[
    ~lola.faster.bj(5,8,0,scramble:false, sort:false, reverse:false),
].ziva;
#+end_src

**** custom rhythms
#+begin_src sclang
[~lola.deg([0,r,4,r].pseq)].ziva;
[~lola.deg((..7).prand).r([1,r,r,1,r,r,1,r,1,r,1,r].pseq)].ziva;
#+end_src

**** preset rhythms

To list available rhythms

#+begin_src sclang
Ziva.rhythms;
#+end_src

To see a rhythm pattern

#+begin_src sclang
Ziva.rhythm(\clave); // check the post window
#+end_src

Rhythms are applied to lists. Each element in the list will consecutively be added to the next hit in the rhythm

#+begin_src sclang
[0,2,4].clave; // -> [ r, r, 0, r, 2, r, r, r, 4, r, r, 0, r, r, 2, r ]
[~lola.faster.deg([0,4].clave.pseq)].ziva;
#+end_src

Can by applied to any sound argument

#+begin_src sclang
~lola = Psynth(\acid);
(
[
    ~lola.faster.cutoff([200,2000].clave.pseq),
].ziva;
)
#+end_src

Some rhythms are divided into two bars that can be played in reverse.

#+begin_src sclang
Ziva.rhythm(\clave);
#+end_src

this shows two nested arrays, each one being a bar. The /clave/ rhythm can be either 2/3:

#+begin_src sclang
[0,2,4].clave;
#+end_src

or 3/2:

#+begin_src sclang
[0,2,4].clave(reverse:1);
#+end_src

** Parameters for Synths
*** scale
To list all available scale names

#+begin_src sclang
Scale.directory;
[~lola.deg([0,2,4]).scale(\minor)].ziva;
#+end_src
*** note - degree - scale

- ~.deg()~ or ~.degree()~ plays notes on a scale, ~0~ being the root.
- ~.note()~ plays chromatically from the root ~0~.
- ~.midinote()~ is set with MIDI note values, ~60~ is middle C.
- ~.freq()~ can be used to set frequency in Hz.

Single note

#+begin_src sclang
[~lola.deg(2)].ziva;
#+end_src

Chord

#+begin_src sclang
[~lola.deg([0,2,4])].ziva;
#+end_src


**** alterations (sharps and flats)
#+begin_src sclang
[~lola.deg([0,2b,4])].ziva;
[~lola.deg([0,2s,4].scale(\minor))].ziva;
#+end_src

*** octave
Default is 5
#+begin_src sclang
[~lola.oct(4)].ziva;
#+end_src

** Synth Parameters
To list the available synths

#+begin_src sclang
Ziva.synths;
#+end_src
To see what parameters are avaiable for a given synth use:

#+begin_src sclang
Ziva.controls(\acid); // \acid is the synth name
#+end_src

Initializing

#+begin_src sclang
~lola = Psynth(\acid);
[~lola].ziva;
#+end_src

Setting parameters

#+begin_src sclang
[~lola.cutoff(8000)].ziva;
[~lola.cutoff(200)].ziva;
#+end_src

** Sample Parameters
To list the available samples

#+begin_src sclang
Ziva.sounds;
#+end_src

Initializing
#+begin_src sclang
~delia = Psample(\delia);
[~delia].ziva;
#+end_src

*** Changing sample name

#+begin_src sclang
[~delia.sound(\tibetan)].ziva;
#+end_src

*** Changing sample index

#+begin_src sclang
[~delia.n(1)].ziva;
#+end_src

if the number is greater than the number of samples in that sample folder it will wrapped around.

*** Speed
#+begin_src sclang
[~delia.speed(0.5)].ziva;
#+end_src

*** Random speeds

#+begin_src sclang
[~delia.randspeeds(4, [1,-1,2,-1])].ziva;
#+end_src

*** Tape effect
Old cassette tape effect (gets crazy pretty fast):

#+begin_src sclang
[~delia.slow.tape(0.9)].ziva;
#+end_src

*** Starting point

~.start()~ (~0.0~ for beginning, ~1.0~ for end):

#+begin_src sclang
[~delia.start(0.5)].ziva; // start in the midpoint
#+end_src

*** Chop and scramble

The samples can be chopped and recomposed from its pieces with ~.chop()~.
The number of chunks to be sliced is set by the second argument. Then a new sequence is created from those chunks. The size of the sequence is given by the first argument.

This example sequences 4 pieces chosen from a list of 8 chunks.

#+begin_src sclang
[~delia.chop(4, 8)].ziva;
#+end_src

* MIDI

To initialize the client:

#+begin_src sclang
MIDIClient.init;
#+end_src

Then connect the first SuperCollider MIDI output ~MIDIOut(0)~ to your MIDI device with your MIDI user iterface (this is different for each operative system).

Then create a musician that plays that instrument.

#+begin_src sclang
~wendy = Pmidi(MIDIOut(0));
// or
~wendy = Pmidi(MIDIOut(0), 1); // to send MIDI to channel 2
#+end_src

~MIDIOut(0)~ syntax may be different for OSX and Windows -- the example above is for Linux.

MIDI channel is optional, default is 0 -- /WARNING: in SC MIDI channels range 0-15, while the standard is 1-16./

#+begin_src sclang
[ ~wendy.oct(4).deg([0,2,4].pseq) ].ziva;
#+end_src


* Patterns

** basic sequence pattern

~.pseq(repeats)~ is used to repeat a sequence of values for a number of times. If no ~repeats~ are specified, it loops for ever.

#+begin_src sclang
[~lola.deg([0,2,4].pseq)].ziva;
#+end_src

~r~ (rests) can be inserted in sequences to create rhythms.

#+begin_src sclang
[~lola.deg([0,r,4].pseq)].ziva;
#+end_src

** random pattern
~.prand(repeats)~ picks a random value from the list on each event (beat):

#+begin_src sclang
[~lola.deg([0,1,2,3,4,r].prand)].ziva;
#+end_src

** nesting patterns
Patterns can be used inside other patterns. There's no limit on the levels of nesting:

#+begin_src sclang
[~lola.faster.deg([0,1,2, [7,8,9].pseq(2)].prand)].ziva;
#+end_src


** other patterns
Other interesting patterns are ~Place~, ~Pshuf~, ~Pbrown~, ~Pwhite~, ~Pstutter~, ...
See [[http://doc.sccode.org/Tutorials/A-Practical-Guide/PG_02_Basic_Vocabulary.html][A-Practical-Guide/PG_02_Basic_Vocabulary]] in SCHelp.

*NOTE:* Živa pattern syntax differs from regular SuperCollider pattern syntax, but both syntaxes can be used. To see what patterns are available in Živa syntax, see [[./Classes/sequenceablecollection.sc]]

Following is an example using both regular SuperCollider pattern syntax and Živa pattern syntax.

#+begin_src sclang
(
[
  ~lola.faster.legato(Pwhite(0.1,1.2)).bj(4,7).cutoff(8000),
  ~lola.oct([3,4].pseq),
].ziva;
)
#+end_src



* Modulation
Using LFOs

#+begin_src sclang
~sine1 = Ziva.lfo(1, wave:\sine, freq:0.6, min:200, max:8000  );
[~lola.legato.cutoff(~sine1)].ziva;
#+end_src

You can create as many LFOs as you want, but the first parameter must be different for each LFO or it will be overwitten (can be a number or a [[http://doc.sccode.org/Classes/Symbol.html][symbol]]).

Available LFO wave shapes are: ~\sine~, ~\saw~, ~\pulse~, ~\tri~, ~\noise0~, ~\noise1~, ~\noise2~

* Effects

Sound effects (reverb, delay, chorus, ...) can be added to the signal chain. To list available sounds use:

#+begin_src sclang
Ziva.fx; // see the post window
Ziva.boot; // this might have to be called -- it's a bug, will be fixed
#+end_src

Important things to consider regarding effects:

- Effects are applied to tracks, not sounds. There are 4 tracks available.
- Any number of effects can be applied to each track (including none, or ~nil~).
- Order matters.

To setup effects for tracks:

#+begin_src sclang
Ziva.track(0, \lowpass, \reverbL);
Ziva.track(1, \delay);
#+end_src

The first argument is the track number. The rest are the effects to be added, *in the order that they will be applied*.

Then connect each sound to the desired track using ~>>~:

#+begin_src sclang
(
[
	~lola.oct([3,4]).cutoff(9000) >> 0,
	~lola.pizz.slow >> 1,
].ziva;
)
Ziva.track(0); // remove the fx from track 0
#+end_src

* Drums

/WARNING: This is experimental/

Drums can be just synths or samples, but there's a special class for the
free AVL plugin that can be downloaded at http://www.bandshed.net/avldrumkits/

This is just a wrapper for AVL's MIDI mapping, it might work with other MIDI drum sets, I haven't tried it.

Create a drummer that sends MIDI (remember to connect it in the MIDI routing app):

#+begin_src sclang
~bonzo = Pavldrums(MIDIOut(0));
#+end_src

With this, you can play drums with strings of characters, where
specific characters are mapped to certain MIDI notes corresponding
to specific drum kits in the AVL plugin.

Spaces are rests.

#+begin_src sclang
[ ~bonzo.drums("b h s h b h s o ").faster ].ziva;
#+end_src

To see the mappings:

#+begin_src sclang
Ziva.drums;
#+end_src
