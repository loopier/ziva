#+title: Živa

Live coding with SuperCollider patterns made easy (hopefully).

A set of tools and syntax sugar for easy live coding with synthdef and sample patterns in SuperCollider.

Živa was developed in a residency at [[https://wiki.ljudmila.org/Research_residency:_Roger_Pibernat][Ljudmila]] (in Ljubljana, Slovenia) as part of the [[https://onthefly.space][On-the-fly project]].

/WARNING: This software is still under heavy development and might considerably change in future versions./

* Requirements
** All OS

    - SuperCollider: https://github.com/supercollider/supercollider - tested with v3.12.2
    - sc3-plugins: https://github.com/supercollider/sc3-plugins/
    - optional, but recommended (for the Dirt-Samples library): SuperDirt quark: https://github.com/musikinformatik/SuperDirt

** Windows
  Windows users also need to install git: https://gitforwindows.org/

* Installation from SuperCollider
#+begin_src sclang
Quarks.install("https://github.com/loopier/ziva");
#+end_src

if you have already installed it before, and simply want to update:

#+begin_src sclang
Quarks.update("ziva");
#+end_src

* License
(C) 2022- Roger Pibernat

Živa is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 2 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this library.  If not, see <http://www.gnu.org/licenses/>.


* Quick Start
** Server
boot the server

#+begin_src sclang
Ziva.boot;
#+end_src

optionally add custom samples -- some are loaded by default

#+begin_src sclang
Ziva.loadSamples("path/to/your/samples/parent/directory"); // $HOME is prepended automatically
#+end_src

list available synths

#+begin_src sclang
Ziva.synths;
#+end_src

list avialable sounds (samples)

#+begin_src sclang
Ziva.sounds;
#+end_src

list available fx

#+begin_src sclang
Ziva.fx;
#+end_src

list available rhythms

#+begin_src sclang
Ziva.rhythms;
#+end_src

list available controls of a synth

#+begin_src sclang
Ziva.controls(\acid);
#+end_src

** Setup and basics

create a synth player

#+begin_src sclang
~nala = Psynth(\acid);
#+end_src

create a sample player

#+begin_src sclang
~lola = Psample(\aekick);
#+end_src

create a band -- placeholder for sound players

#+begin_src sclang
(
[
	~nala,
	~lola
].ziva;
)
#+end_src

stop everything

#+begin_src sclang
(
[
	// ~nala,
	// ~lola
	nil
].ziva;
)
#+end_src
or

#+begin_src sclang
Ziva.stop;
#+end_src

** Playing
play an eighth-note arpeggio with the synth

#+begin_src sclang
(
[
	~nala.deg([0,2,4].pseq),
	~lola,
].ziva;
)
#+end_src

play same arpeggio in another scale

#+begin_src sclang
(
[
	~nala.deg([0,2,4].pseq).scale(\diminished),
	~lola,
].ziva;
)
#+end_src


play the synth faster than the kick drum

-- other options are: ~slowest, slower, slow, fast, faster, fastest~

#+begin_src sclang
(
[
	~nala.fast.deg([0,2,4].pseq),
	~lola,
].ziva;
)
#+end_src

play a rhythm with the kick drum

#+begin_src sclang
(
[
	// ~nala.fast.deg([0,2,4].pseq),
	~lola.faster.r([0].cascara.pseq), // *
	nil
].ziva;
)
#+end_src

add a preset rhtythm to the arpegiated synth

(see ~Ziva.rhythms~ for available rhythms)

#+begin_src sclang
(
[
	~nala.faster.deg([0,2,4].tumbao.pseq), // *
	~lola.faster.r([0].cascara.pseq),
	nil
].ziva;
)
#+end_src

euclidean rhythms

#+begin_src sclang
(
[
	~nala.faster.bj(5,8),
	~lola.faster.bj(3,8),
	nil
].ziva;
)
#+end_src

add a bass line with the same synth

#+begin_src sclang
(
[
	~nala.faster.deg([0,2,4].tumbao.pseq),
	~nala.faster.deg([0,4,7].montuno.pseq).oct(3), // *
	~lola.faster.r([0].cascara.pseq),
	nil
].ziva;
)
#+end_src

dynamics -- play louder or softer

-- options are: ~fff, ff, f, p, pp, ppp~ (from fortissimo to pianissimo)

-- ~.amp([0.0 .. 1.0])~ for custom loudness -- BE CAREFUL with values > ~1.0~

#+begin_src sclang
(
[
	~nala.fast.p.oct(6),
	~nala.ff.oct(3),
	~nala.faster.amp([0.1,0.3].pseq),
].ziva;
)
#+end_src

add a pizzicato chord comp

-- other options are:

	- ~stass~: staccatissimo

	- ~stacc~: staccato

	- ~tenuto~

	- ~legato~ (or ~leg~)

	- ~pedal~

 - ~legato(value)~

#+begin_src sclang
(
[
	~nala.faster.pizz.deg([0,2,4]).r([0].clave.pseq).oct(6), // *
	~nala.faster.deg([0,2,4].tumbao.pseq),
	~nala.faster.deg([0,4,7].montuno.pseq).oct(3),
	~lola.faster.r([0].cascara),
	nil
].ziva;
)
#+end_src

pan things around with:

- ~right~ or ~left~

- ~randpan~

- ~pan([-1.0 .. 1.0])~

#+begin_src sclang
(
[
	~nala.faster.pizz.deg([0,2,4]).r([0].clave.pseq).oct(6).randpan, // *
	~nala.faster.deg([0,2,4].tumbao.pseq).right, // *
	~nala.faster.deg([0,4,7].montuno.pseq).oct(3).pan(-0.2), // *
	~lola.faster.r([0].cascara).pan(0.2),
	nil
].ziva;
)
#+end_src

create a melody of any length from a note list (will change every time you evaluate)

#+begin_src sclang
(
[
	~nala.faster.deg([0,2,4].choosen(8).tumbao.pseq),
	nil
].ziva;
)
#+end_src

create a melody with a different approach using legato and rests (~r~)

#+begin_src sclang
(
[
	~nala.fast.deg([0,2,4,r].choosen(8).pseq).legato([0.1,0.5,1].choosen(8).pseq),
	nil
].ziva;
)
#+end_src

create a melody with yet another approach using ~dur~

#+begin_src sclang
(
[
	~nala.dur([1,1/2,1/4].choosen(4).pseq).deg([0,2,4,7].choosen(8).pseq),
	nil
].ziva;
)
#+end_src

play a longer sample

#+begin_src sclang
~del = Psample(\delia);
(
[
	~del,
	nil
].ziva;
)
#+end_src

play it for a longer time

#+begin_src sclang
(
[
	~del.slow,
	nil
].ziva;
)
#+end_src

choose a different sample

#+begin_src sclang
(
[
	~del.dur(6).n(4),
	nil
].ziva;
)
#+end_src

choose a random sample everytime

#+begin_src sclang
(
[
	~del.slow.n((..8).prand),
	nil
].ziva;
)
#+end_src

change the playing rate

#+begin_src sclang
(
[
	~del.slow.n(4).speed(0.5),
	nil
].ziva;
)
#+end_src

play the sample in a random sequence of speeds

- first argument is the length of the sequence

- second argument is the list of speeds to choose from

#+begin_src sclang
(
[
	~del.fast.n(4).randspeeds(4,[-1,1,-0.5,0.5,2,-2]),
	nil
].ziva;
)
#+end_src

old broken cassette tape effect

- ~0.0~ no effect

- the higher the crazier

#+begin_src sclang
(
[
	~del.slow.n(4).tape(0.5),
	nil
].ziva;
)
#+end_src

start playing halfway in the sample

#+begin_src sclang
(
[
	~del.slow.n(4).start(0.5),
	nil
].ziva;
)
#+end_src

chop the sample and rearange the slices

- first argument is the number of slices used (randomly chosen from the chopped sample)

- second argument is the number of slices the sampled is chopped in

#+begin_src sclang
(
[
	~del.fast.n(4).chop(4,8),
	nil
].ziva;
)
#+end_src

change the tempo

- this changes the GLOBAL tempo. So changing it to any sound will affect all the others

#+begin_src sclang
(
[
	~del.fast.n(4).chop(8,8).bpm(120),
	~lola,
	nil
].ziva;
)
#+end_src

combine them all

comment lines to mute them, and uncomment them to unmute them

#+begin_src sclang
(
[
	~nala.faster.stacc.deg([0,2,4].choosen(8).tumbao.pseq).oct([4,5,6,7].choosen(8).pseq),
	~nala.fast.deg([0,7].choosen(8).montuno.pseq).oct(3),
	~lola.f.n((..4).choosen(4).pseq),
	~del.f.fast.legato([0.5,1,2].choosen(8).pseq).n((..7).choosen(8).pseq).chop(8).randspeeds(5,[-1,-2,1,2]),
	nil
].ziva;
)
#+end_src

** Effects

Effects are set on tracks. Sounds can then be routed to those tracks using ~>>~

Syntax: ~Ziva.track(nameOrNumber, effect1, effect2, ...);~. Order matters!

To list available effects: ~Ziva.fx~

#+begin_src sclang
Ziva.track(0, \delay, \reverb);

(
[
    ~nala >> 0,
    nil
].ziva;
)

#+end_src
